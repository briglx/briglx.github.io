<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://www.briglamoreaux.com/tag/logging/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://www.briglamoreaux.com/" rel="alternate" type="text/html" />
  <updated>2022-07-19T16:54:02-07:00</updated>
  <id>https://www.briglamoreaux.com/tag/logging/feed.xml</id>

  
  
  

  
    <title type="html">Brig Lamoreaux | </title>
  

  
    <subtitle>Long term storage for a forgetful mind</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Logging Best Practices</title>
      <link href="https://www.briglamoreaux.com/2008/04/21/logging-best-practices.html" rel="alternate" type="text/html" title="Logging Best Practices" />
      <published>2008-04-21T00:00:00-07:00</published>
      <updated>2008-04-21T00:00:00-07:00</updated>
      <id>https://www.briglamoreaux.com/2008/04/21/logging-best-practices</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2008/04/21/logging-best-practices.html">&lt;p&gt;I just read a presentation from &lt;a href=&quot;http://www.certconf.org/presentations/2005/files/WC4.pdf&quot;&gt;Network Intelligence&lt;/a&gt; on putting together a &lt;a href=&quot;http://www.acronymfinder.com/af-query.asp?Acronym=siem&quot;&gt;SIEM&lt;/a&gt; solution. I really don’t know that much about SIEM, but what I do know is when my application breaks, I want to know what happened and have access to the logs as quickly and easily as possible.&lt;/p&gt;

&lt;p&gt;I’ve talked about &lt;a href=&quot;http://blog.framework-it.net/2007/07/how-to-implement-logging.html&quot;&gt;how to implement Logging&lt;/a&gt; in an application before, but this presentation sparked a few thoughts.&lt;/p&gt;

&lt;h2 id=&quot;dont-filter-logs-at-the-source&quot;&gt;Don’t Filter Logs at the Source&lt;/h2&gt;

&lt;p&gt;Log all events to a single place, then use a different tool to pull down the data to sort and filter.&lt;/p&gt;

&lt;h2 id=&quot;have-a-reporting-time-period&quot;&gt;Have a Reporting Time Period&lt;/h2&gt;

&lt;p&gt;Create a report that will run once a Day, once a week or whenever that shows all the events you are interested in seeing. After the report has ran, you can get rid of the data -or- you can archive it.&lt;/p&gt;

&lt;h2 id=&quot;standardized-time&quot;&gt;Standardized Time&lt;/h2&gt;

&lt;p&gt;Use a centralized, standard Time for every log. Synchronizing time between application logs will help correlate issues between applications.&lt;/p&gt;

&lt;h2 id=&quot;protect-sensitive-data&quot;&gt;Protect Sensitive Data&lt;/h2&gt;

&lt;p&gt;Be cautious of Sensitive information captured in the logs. Often username, machine names, and other sensitive data is captured in the event log. Provide access to the log to only those who need it.&lt;/p&gt;

&lt;h2 id=&quot;analyze-data&quot;&gt;Analyze Data&lt;/h2&gt;

&lt;p&gt;Every application should know what events will be logged during day to day usage. Create a baseline report and look for exceptions to the expected baseline.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="logging" />
      

      
        <summary type="html">I just read a presentation from Network Intelligence on putting together a SIEM solution. I really don’t know that much about SIEM, but what I do know is when my application breaks, I want to know what happened and have access to the logs as quickly and easily as possible.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to Implement logging</title>
      <link href="https://www.briglamoreaux.com/2007/07/18/how-to-implement-logging.html" rel="alternate" type="text/html" title="How to Implement logging" />
      <published>2007-07-18T00:00:00-07:00</published>
      <updated>2007-07-18T00:00:00-07:00</updated>
      <id>https://www.briglamoreaux.com/2007/07/18/how-to-implement-logging</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2007/07/18/how-to-implement-logging.html">&lt;p&gt;We are getting ready to send our first child off to kindergarten and I wish I could be a fly on the wall to see how he enjoys his first day of school. Secretly I want to make sure he remembers the one-two punch I taught him in case someone tries to bully him around. Fortunately at work I have much more control over keeping track of my applications once I send them into production. The secret is Logging.&lt;/p&gt;

&lt;p&gt;Our team has used three major logging implementations. Log4Net, Enterprise Library, and a homegrown solution. What we have discovered is the importance of making the implementation transparent to our application.&lt;/p&gt;

&lt;h2 id=&quot;the-logging-wrapper&quot;&gt;The Logging Wrapper&lt;/h2&gt;

&lt;p&gt;The wrapper class minimizes the impact to your application when you switch out a logging implementation say from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log4Net&lt;/code&gt; to Enterprise Library Logging. I have found the following interface to completely accommodate our needs.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ILogger&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogInformational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I use three categories for the messages specifically so I can turn on and off logging by setting a threshold level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Informational&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These messages will be used liberally throughout the code to provide process detailed information similar to debug traces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Warnings are events the application can recover from. These include messages that provide more detail when the application responds to the user “Unable to save record”. Warnings also include all exceptions that are handled in a try catch block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Errors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Errors are exceptions that are logged from the global error handler.These are errors that the application did not expect.&lt;/p&gt;

&lt;h2 id=&quot;the-implementation&quot;&gt;The Implementation&lt;/h2&gt;

&lt;p&gt;We use Enterprise Library for .NET Framework 1.1, June 2005 in our projects. We are still evaluating Enterprise Library 3.0 – April 2007 (for .NET Framework 2.0 and 3.0). In the meanwhile this is how I configured EntLib.&lt;/p&gt;

&lt;p&gt;First I include the following dlls&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Microsoft.Practices.EnterpriseLibrary.Common&lt;/li&gt;
  &lt;li&gt;Microsoft.Practices.EnterpriseLibrary.Configuration&lt;/li&gt;
  &lt;li&gt;Microsoft.Practices.EnterpriseLibrary.ExceptionHandling&lt;/li&gt;
  &lt;li&gt;Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging&lt;/li&gt;
  &lt;li&gt;Microsoft.Practices.EnterpriseLibrary.Logging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I create a class that implements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILogger&lt;/code&gt; and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EntLib&lt;/code&gt; to get the job done.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Practices.EnterpriseLibrary.Logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Practices.EnterpriseLibrary.ExceptionHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EntLib11Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;       &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;       &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warning&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogWarning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;       &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionPolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HandleException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warning&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;       &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionPolicy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HandleException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;   &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how both the Enterprise Library Logging and Exception Handling is used to provide functionality for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ILogger&lt;/code&gt;. With the Logging Block, I have to specify in the code the Priority level and Severity level. The Exception Handling Block allows those values to be set in the configuration file, which is what needs to be configure now.&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Configuration of Enterprise Library can be a little confusing but lets just go one section at a time.&lt;/p&gt;

&lt;p&gt;The first thing we’ll want to setup is the logging aspect. This makes the Exception Handling configuration a lot easier. Start up the EntLibConfig.exe tool and select File - Open Application and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.config&lt;/code&gt; file for the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logging Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select your app node and choose to add the Logging and Instrumentation Application Block.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/addblock.png&quot; alt=&quot;AddBlock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tool allows you to define categories, formatters, and sinks. Sinks are the final resting place for our messages. Sinks can be a flat file or an event log. Formatter are used to turn our message object into a plain text message. The category is where you define what happens to our message object when it is caught.&lt;/p&gt;

&lt;p&gt;I modify the Sinks section to have one sink for the Application Event Log.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/sinksetup.png&quot; alt=&quot;SinkSetup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Modify the categories section to have the three categories defined during the implementation step&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Information&lt;/li&gt;
  &lt;li&gt;Warning&lt;/li&gt;
  &lt;li&gt;Error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice how each category has a single destination. The destination tells Enterprise library to use the default Text Formatter and send it to the Application Event Log Sink.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/loggingcategory.png&quot; alt=&quot;LoggingCategory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One last step in logging is to set up a default category. I like to set mine to default to Error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/defaultcategory.png&quot; alt=&quot;DefaultCategory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point your application should be able to use LogInformational(string message) and LogWarning(string message)with no problems. Setting up the exception handling will take care of the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exception Handling Configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select your app node and choose to add the Exception Handling Application Block. Select the application block and add a new Exception Policy with the name Error. Add a new Exception Type to the policy that catches all Exceptions. Finally add a new Logging Handler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/errorexceptionpolicy.png&quot; alt=&quot;ErrorExceptionPolicy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The configuration I use for the Logging Handler of the Error Exception Policy is:&lt;/p&gt;

&lt;table width=&quot;355&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;198&quot;&gt;LogCategory&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;155&quot;&gt;Error&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;198&quot;&gt;Priority&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;155&quot;&gt;10&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;198&quot;&gt;Severity&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;158&quot;&gt;Error&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The Warning exception policy is exactly like the Error but with the following values for the Logging Handler:&lt;/p&gt;

&lt;table width=&quot;400&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;2&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;LogCategory&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;198&quot;&gt;Warning&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;Priority&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;198&quot;&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;200&quot;&gt;Severity&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;198&quot;&gt;Warning&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/warningexceptionpolicy.png&quot; alt=&quot;WarningExceptionPolicy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With both exception policies setup and using the logging our ILogging class is fully functional. Now it is a simple configuration setting to turn on and off the different logging levels.&lt;/p&gt;

&lt;p&gt;Any value larger than the MinimumPriority will be logged. Anything less will not be logged, simple. The values of the categories are: Error-10, Warning-5, and Information-1. I like to set the MinimumPriority to 10 in production.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/minimumpriority.png&quot; alt=&quot;MinimumPriority&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;So far this method of logging has been very useful. There is a lot more you can do from here such as sending emails when a warning happens. I’ve only laid the foundation of a logging methodology.&lt;/p&gt;

&lt;p&gt;In the future I plan to evaluate how the Enterprise Library 3.0 – April 2007 version handles logging and create an implementation for ILogger. Other things I’ve thought about is to create some sort of LoggingFactory or ServiceProvider to really disconnect my application from the implementation. Ideally I don’t want to have any referenced dlls in my apps.&lt;/p&gt;

&lt;p&gt;Tell me what your experience has been with logging. What works well for you, what doesn’t. Do you see yourself using the ILogger interface. Please let me know because I would love to improve on what I have.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="net" />
      
        <category term="logging" />
      

      
        <summary type="html">We are getting ready to send our first child off to kindergarten and I wish I could be a fly on the wall to see how he enjoys his first day of school. Secretly I want to make sure he remembers the one-two punch I taught him in case someone tries to bully him around. Fortunately at work I have much more control over keeping track of my applications once I send them into production. The secret is Logging.</summary>
      

      
      
    </entry>
  
</feed>
