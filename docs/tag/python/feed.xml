<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://www.briglamoreaux.com/tag/python/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://www.briglamoreaux.com/" rel="alternate" type="text/html" />
  <updated>2023-06-22T18:18:20+00:00</updated>
  <id>https://www.briglamoreaux.com/tag/python/feed.xml</id>

  
  
  

  
    <title type="html">Brig Lamoreaux | </title>
  

  
    <subtitle>Long term storage for a forgetful mind</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">More Time Doesn’t Always Help</title>
      <link href="https://www.briglamoreaux.com/2018/06/28/more-time-doesnt-always-help.html" rel="alternate" type="text/html" title="More Time Doesn't Always Help" />
      <published>2018-06-28T00:00:00+00:00</published>
      <updated>2018-06-28T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2018/06/28/more-time-doesnt-always-help</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2018/06/28/more-time-doesnt-always-help.html">&lt;p&gt;Continuing on with Keras, there is a simple IMDB data set with movie ratings.  Building a quick model and training over a few epochs shows the training accuracy goes up to the high 90%. However, the validation accuracy hovers around 87%.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/trainingvalidationaccuracy.png&quot; alt=&quot;TrainingValidationAccuracy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The model is over-fitting the data somehow. No matter how many more epochs I run, the validation won’t get better.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="software" />
      
        <category term="keras" />
      
        <category term="machine-learning" />
      
        <category term="python" />
      
        <category term="tensorflow" />
      

      
        <summary type="html">Continuing on with Keras, there is a simple IMDB data set with movie ratings.  Building a quick model and training over a few epochs shows the training accuracy goes up to the high 90%. However, the validation accuracy hovers around 87%.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Surprising Results with Python Thumbnails</title>
      <link href="https://www.briglamoreaux.com/2018/04/13/surprising-results-with-python-thumbnails.html" rel="alternate" type="text/html" title="Surprising Results with Python Thumbnails" />
      <published>2018-04-13T00:00:00+00:00</published>
      <updated>2018-04-13T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2018/04/13/surprising-results-with-python-thumbnails</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2018/04/13/surprising-results-with-python-thumbnails.html">&lt;p&gt;I’ve been working with images recently and am using a technique for a hashing algorithm. This technique resized the image to a 9x8 gray scale image.&lt;/p&gt;

&lt;p&gt;I found five different ways to do it with a few surprising results:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cv2&lt;/li&gt;
  &lt;li&gt;pillow&lt;/li&gt;
  &lt;li&gt;skimage&lt;/li&gt;
  &lt;li&gt;two custom gray scale functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The first part of the code loads the image file, convert it to black and white, and then resizes it down to an 9x8 thumbnail.&lt;/p&gt;

&lt;p&gt;The rgb3gray and rgb2gray2 methods are custom functions that attempt to convert an RGB [n,d,3] matrix into a gray scale.&lt;/p&gt;

&lt;p&gt;The second part of of the code uses matplotlib to show the thumbnails.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import sys

import cv2
import numpy as np

import matplotlib.pyplot as plt

from PIL import Image
from skimage import io

from skimage import transform as skitr

hash_size=8

cv2Image = cv2.imread(fileName)
cv2Image = cv2.cvtColor(cv2Image, cv2.COLOR_BGR2GRAY)                            
cv2Image = cv2.resize(cv2Image, (hash_size +1 , hash_size))

pillowImage = Image.open(fileName)
pillowImage = pillowImage.convert('LA')
pillowImage = pillowImage.resize((9,8))

skImage = io.imread(fileName, as_grey=True)
skImage = skitr.resize(skImage, (hash_size, hash_size+1))
                                 
 #  Use CV2 to load and resize image as original
originalImage = resizeImage(cv2.imread(fileName))   
rgb2grayImage = rgb2gray(originalImage)
rgb2grayImage2 = rgb2gray2(originalImage)                               

# Display the images
fig, axes = plt.subplots(nrows=2, ncols=3)
axes[0, 0].set_title('Original Image')
axes[0, 0].imshow(originalImage, cmap='gray')
axes[0, 0].axis('off')
                                 
axes[0, 1].set_title('CV2 Image')
axes[0, 1].imshow(cv2Image, cmap='gray')
axes[0, 1].axis('off')
                                 
axes[0, 2].set_title('Pillow Image')
axes[0, 2].imshow(pillowImage, cmap='gray')
axes[0, 2].axis('off')
                                 
axes[1, 0].set_title('skimage Image')
axes[1, 0].imshow(skImage, cmap='gray')
axes[1, 0].axis('off')

axes[1, 1].set_title('Rgb2Gray Image')
axes[1, 1].imshow(rgb2grayImage, cmap='gray')
axes[1, 1].axis('off')

axes[1, 2].set_title('Rgb2Gray2 Image')
axes[1, 2].imshow(rgb2grayImage2, cmap='gray')
axes[1, 2].axis('off')

fig.tight_layout()
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-method&quot;&gt;The Method&lt;/h2&gt;

&lt;p&gt;I took four different images and ran it against the code. I used Cv2 as the baseline for my original image thumbnail. This thumbnail has the RGB colors and is resized.&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Image 1 - Color&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails01.png&quot; alt=&quot;comparePythonThumbnails01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 2 - Color&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails02.png&quot; alt=&quot;comparePythonThumbnails02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 3 - Color&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails03.png&quot; alt=&quot;comparePythonThumbnails03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 4 - Color&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails04.png&quot; alt=&quot;comparePythonThumbnails04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a few things I noticed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CV2 and skimage appear to be identical&lt;/li&gt;
  &lt;li&gt;Cv2 and skimage seem too light and too dark compared to the original&lt;/li&gt;
  &lt;li&gt;Pillow seemed best matching the luminance of the original&lt;/li&gt;
  &lt;li&gt;Rgb2Gray nearly matches the CV2 and skimage&lt;/li&gt;
  &lt;li&gt;Rgb2Gray2 does not produce anything that makes sense. Apparently I have a bug in my code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It seems like pillow does a better job at matching the luminance. For the final test, I used Windows Color Filter feature to remove the color from the original image. I used this as my baseline.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 1 - Gray Scaled&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails01bw.png&quot; alt=&quot;comparePythonThumbnails01bw&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 2 - Gray Scaled&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails02bw.png&quot; alt=&quot;comparePythonThumbnails02bw&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 3 - Gray Scale&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails03bw.png&quot; alt=&quot;comparePythonThumbnails03bw&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image 4 - Gray Scale&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.briglamoreaux.com/assets/images/comparepythonthumbnails04bw.png&quot; alt=&quot;comparePythonThumbnails04bw&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After running the images through windows color filter, it appears Pillow does the best job matching the original.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="software" />
      
        <category term="python" />
      

      
        <summary type="html">I’ve been working with images recently and am using a technique for a hashing algorithm. This technique resized the image to a 9x8 gray scale image.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Parse Azure Deployment Status</title>
      <link href="https://www.briglamoreaux.com/2017/08/24/parse-azure-deployment-status.html" rel="alternate" type="text/html" title="Parse Azure Deployment Status" />
      <published>2017-08-24T00:00:00+00:00</published>
      <updated>2017-08-24T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2017/08/24/parse-azure-deployment-status</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2017/08/24/parse-azure-deployment-status.html">&lt;p&gt;I’ve been making a lot of deployments that take a while to finish. There is an api call to fetch the status of the operations.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure group deployment operation list --name deploymentname --resource-group rgname&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step was to parse the json response.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;azure group deployment operation list --name deploymentname --resource-group rgname | python parse.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the code &lt;a href=&quot;https://gist.github.com/briglx/d2ff66737195dd810d4a3b959358ed4f&quot;&gt;Parse Azure Deployment Response&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="software" />
      
        <category term="azure" />
      
        <category term="python" />
      

      
        <summary type="html">I’ve been making a lot of deployments that take a while to finish. There is an api call to fetch the status of the operations.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Extract Terms from Text</title>
      <link href="https://www.briglamoreaux.com/2014/01/10/extract-terms-from-text.html" rel="alternate" type="text/html" title="Extract Terms from Text" />
      <published>2014-01-10T00:00:00+00:00</published>
      <updated>2014-01-10T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2014/01/10/extract-terms-from-text</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2014/01/10/extract-terms-from-text.html">&lt;p&gt;I’ve been playing around with NLP. I wanted to see if I could extract terms from text. With the help of the internet, I found &lt;a href=&quot;http://stackoverflow.com/questions/1575246/how-do-i-extract-keywords-used-in-text/1575345#1575345&quot;&gt;some answers&lt;/a&gt;. It boils down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/topia.termextract/&quot;&gt;python topia library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/search/content/V1/termExtraction.html&quot;&gt;Yahoo keyword extraction service&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;The python example looks like this&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;topia.termextract&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extractor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TermExtractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;One company that successfully leverages a generic strategy is Costco Wholesale and that generic strategy is low-cost leadership. The company's mission is to provide popular products to customers at the lowest prices the market can offer. One way that Costco has been successful at this is by cutting expenses. Actual Costco stores are literally warehouses full of products. The company saves on many of the cosmetic aspects of typical retail stores. Additionally, most Costco stores are open 10 am to 8:30 pm during the week and closing earlier on the weekends. Less operating time saves money. Additionally, Costco operates on a membership program. This means that someone must be a member to enter the store and purchase the merchandise. One staff member stands at the entrance checking membership cards as members enter and other staff members stand at the exit matching receipts with purchases. This design allows the company to cut down on staffing costs by not needing as many employees wandering the large warehouses.&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Show terms from text 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taggedTerms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taggedTerms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'8:30 pm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Actual Costco stores'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Costco'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Costco stores'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'member'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'membership cards'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'membership program'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'staff member'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'staff members'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'store'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;yahoo-example&quot;&gt;Yahoo Example&lt;/h2&gt;

&lt;p&gt;Calling Yahoo with the same text We get&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;costco stores&lt;/li&gt;
  &lt;li&gt;costco wholesale&lt;/li&gt;
  &lt;li&gt;generic strategy&lt;/li&gt;
  &lt;li&gt;cost leadership&lt;/li&gt;
  &lt;li&gt;cosmetic aspects&lt;/li&gt;
  &lt;li&gt;membership cards&lt;/li&gt;
  &lt;li&gt;costco&lt;/li&gt;
  &lt;li&gt;membership program&lt;/li&gt;
  &lt;li&gt;warehouses&lt;/li&gt;
  &lt;li&gt;popular products&lt;/li&gt;
  &lt;li&gt;staff member&lt;/li&gt;
  &lt;li&gt;retail stores&lt;/li&gt;
  &lt;li&gt;staff members&lt;/li&gt;
  &lt;li&gt;receipts&lt;/li&gt;
  &lt;li&gt;lowest prices&lt;/li&gt;
  &lt;li&gt;wholesale&lt;/li&gt;
  &lt;li&gt;money&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wordpress&quot;&gt;Wordpress&lt;/h2&gt;

&lt;p&gt;When I posted this post, Wordpressed suggested I should tag this post with the following. So there must be a plugin somewhere, could be topia.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Costco Wholesale&lt;/li&gt;
  &lt;li&gt;Costco&lt;/li&gt;
  &lt;li&gt;Costco stores&lt;/li&gt;
  &lt;li&gt;generic strategy&lt;/li&gt;
  &lt;li&gt;Actual Costco stores&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="nlp" />
      
        <category term="python" />
      

      
        <summary type="html">I’ve been playing around with NLP. I wanted to see if I could extract terms from text. With the help of the internet, I found some answers. It boils down to:</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Sentiment Analysis</title>
      <link href="https://www.briglamoreaux.com/2013/03/26/sentiment-analysis.html" rel="alternate" type="text/html" title="Sentiment Analysis" />
      <published>2013-03-26T00:00:00+00:00</published>
      <updated>2013-03-26T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2013/03/26/sentiment-analysis</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2013/03/26/sentiment-analysis.html">&lt;p&gt;I’d like to know a bit more about the tools and techniques around solving sentiment analysis. Here are a few link’s I’ve found. My focus is to use python.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sentiment_analysis&quot;&gt;Over view at Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://text-processing.com/demo/sentiment/&quot;&gt;Text Processing Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nltk.org/&quot;&gt;nltk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japerk/nltk-trainer&quot;&gt;nltk trainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nltk-trainer.readthedocs.org/en/latest/&quot;&gt;More nltk Trainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/japerk/nltk-trainer/src&quot;&gt;Even more nltk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part of training a model is to have humans label the data. Here is a typical use case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download Data&lt;/li&gt;
  &lt;li&gt;Present to User&lt;/li&gt;
  &lt;li&gt;User marks as positive of negative or nutural&lt;/li&gt;
  &lt;li&gt;Similar to Google Moderator&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="software" />
      
        <category term="machine-learning" />
      
        <category term="nltk" />
      
        <category term="python" />
      
        <category term="sentiment-analysis" />
      
        <category term="technology" />
      

      
        <summary type="html">I’d like to know a bit more about the tools and techniques around solving sentiment analysis. Here are a few link’s I’ve found. My focus is to use python.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Python and Screen Scraping</title>
      <link href="https://www.briglamoreaux.com/2011/01/14/python-and-screen-scraping.html" rel="alternate" type="text/html" title="Python and Screen Scraping" />
      <published>2011-01-14T00:00:00+00:00</published>
      <updated>2011-01-14T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2011/01/14/python-and-screen-scraping</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2011/01/14/python-and-screen-scraping.html">&lt;p&gt;I wanted to do a quick test on a website using Python. I knew about &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup&quot;&gt;beautifulsoup&lt;/a&gt; but I wanted the power of JQuery. So I found &lt;a href=&quot;http://pypi.python.org/pypi/pyquery&quot;&gt;pyquery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found some &lt;a href=&quot;http://blog.jeffbalogh.org/post/89619207/pyquery-a-jquery-like-library-for-python&quot;&gt;instructions&lt;/a&gt; to get started and noticed some people complaining about how difficult it is to get installed. Hmm I wonder why?&lt;/p&gt;

&lt;p&gt;It only needs a dependency to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lxml&lt;/code&gt; which has a &lt;a href=&quot;http://codespeak.net/lxml/installation.html&quot;&gt;dependency&lt;/a&gt; to &lt;a href=&quot;http://peak.telecommunity.com/DevCenter/EasyInstall#installing-easy-install&quot;&gt;easy_install&lt;/a&gt; which needs &lt;a href=&quot;http://pypi.python.org/pypi/setuptools#downloads&quot;&gt;setuptools&lt;/a&gt;. Oh, that’s why people complain. Oh well let’s try.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I downloaded Download the &lt;a href=&quot;http://pypi.python.org/pypi/setuptools#downloads&quot;&gt;setuptools-0.6c11-py2.6.egg&lt;/a&gt; because my version of Python is 2.6&lt;/li&gt;
  &lt;li&gt;Run setuptools as if it were a shell script. Apparently this installs easy_install&lt;/li&gt;
  &lt;li&gt;Now I can install lxml with easy_install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo easy_install lxml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This failed for me. So I’m going to make sure I have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libxml2&lt;/code&gt; and libxslt. First I install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libxml2&lt;/code&gt;-dev &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo apt-get install libxml2-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First I need to &lt;a href=&quot;http://www.techsww.com/tutorials/libraries/libxml/installation/installing_libxml_on_ubuntu_linux.php&quot;&gt;build libxml2&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget ftp://xmlsoft.org/libxml2/libxml2-sources-2.7.6.tar.gz 
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvsf&lt;/span&gt; libxml2-sources-2.7.6.tar.gz 
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libxml2-2.7.6/ 
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/libxml2 
make 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next &lt;a href=&quot;http://www.techsww.com/tutorials/libraries/libxslt/installation/installing_libxslt_on_ubuntu_linux.php&quot;&gt;build libxslt&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget ftp://xmlsoft.org/libxslt/libxslt-1.1.26.tar.gz 
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvzf&lt;/span&gt; libxslt-1.1.26.tar.gz 
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libxslt-1.1.26 
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/libxslt &lt;span class=&quot;nt&quot;&gt;--with-libxml-prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/libxml2/ 
make 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still errors… I’m stopping&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="python" />
      

      
        <summary type="html">I wanted to do a quick test on a website using Python. I knew about beautifulsoup but I wanted the power of JQuery. So I found pyquery.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">First Impressions of Google App Engine</title>
      <link href="https://www.briglamoreaux.com/2009/02/01/first-impressions-of-google-app-engine.html" rel="alternate" type="text/html" title="First Impressions of Google App Engine" />
      <published>2009-02-01T00:00:00+00:00</published>
      <updated>2009-02-01T00:00:00+00:00</updated>
      <id>https://www.briglamoreaux.com/2009/02/01/first-impressions-of-google-app-engine</id>
      <content type="html" xml:base="https://www.briglamoreaux.com/2009/02/01/first-impressions-of-google-app-engine.html">&lt;p&gt;So I thought I would try to see what &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt; is all about. My main goal is to learn python a little better and also try to get a better understanding of how to build applications that can&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Handle a lot of load&lt;/li&gt;
  &lt;li&gt;Be distributed&lt;/li&gt;
  &lt;li&gt;Have Standard Data access&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;I’m a .Net developer on a Windows machine and really don’t have a lot of Linux/Python experience. I know I’m not alone so I am going to track my experience using GAE to build my car maintenance application know as Motozio.&lt;/p&gt;

&lt;p&gt;I’m following the Google Getting started guide which is the following&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;http://www.python.org/download/releases/2.5.4/&quot;&gt;Python 2.5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;http://code.google.com/appengine/downloads.html&quot;&gt;GAE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;coding&quot;&gt;Coding&lt;/h2&gt;

&lt;p&gt;Installation is a breeze. The two python files for the &lt;a href=&quot;http://code.google.com/appengine/docs/gettingstarted/helloworld.html&quot;&gt;hello world&lt;/a&gt; program are pretty straight forward too.&lt;/p&gt;

&lt;p&gt;Trouble hit when I tried to test my application. I really didn’t know how to call the script but I figured it out.&lt;/p&gt;

&lt;p&gt;My application folder structure looks like this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c:\dev\helloworld\ c:\dev\helloworld\helloworld.py c:\dev\helloworld\app.yaml&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;running&quot;&gt;Running&lt;/h2&gt;

&lt;p&gt;I had to open a command prompt and type: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\dev&amp;gt;dev_appserver.py helloworld&lt;/code&gt; Notice that the path to google_appengine, where the dev_appserver.py script resides, is already in the system path. The script dev_appserver wants the path to the application. Which is the helloworld directory.&lt;/p&gt;

&lt;p&gt;Once I got that figure out. Bam! My helloworld was up and running at &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m always impressed with out of the box examples of hello world. I really liked the ruby on rails example. And I am just as impressed with App Engine so far. Of course it doesn’t take much to impress me.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="app-engine" />
      
        <category term="python" />
      

      
        <summary type="html">So I thought I would try to see what Google App Engine is all about. My main goal is to learn python a little better and also try to get a better understanding of how to build applications that can</summary>
      

      
      
    </entry>
  
</feed>
