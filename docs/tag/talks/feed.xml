<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/talks/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-09-20T20:18:07-07:00</updated>
  <id>http://localhost:4000/tag/talks/feed.xml</id>

  
  
  

  
    <title type="html">Brig Lamoreaux | </title>
  

  
    <subtitle>Long term storage for a forgetful mind</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">MongoDB Boulder</title>
      <link href="http://localhost:4000/2013/01/23/mongodb-boulder.html" rel="alternate" type="text/html" title="MongoDB Boulder" />
      <published>2013-01-23T00:00:00-07:00</published>
      <updated>2013-01-23T00:00:00-07:00</updated>
      <id>http://localhost:4000/2013/01/23/mongodb-boulder</id>
      <content type="html" xml:base="http://localhost:4000/2013/01/23/mongodb-boulder.html">&lt;p&gt;Thanks to 10Gen team in providing me an opportunity to speak at the MongoDB Boulder conference.&lt;/p&gt;

&lt;p&gt;Explain the process, methodology, and results used at Apollo Group to evaluated MongoDB to replace Oracle for a core platform component.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://player.vimeo.com/video/293388068?autoplay=0&quot; title=&quot;How We Evaluated MongoDB as a Relational Database Replacement&quot;&gt;Session Recording&lt;/a&gt;&lt;/p&gt;

&lt;!-- 
&lt;iframe class=&quot;vimeo-iframe&quot; src=&quot;https://player.vimeo.com/video/293388068?autoplay=0&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; allowfullscreen=&quot;true&quot; width=&quot;100%&quot; height=&quot;600px&quot;&gt;&lt;/iframe&gt; --&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="mongodb" />
      
        <category term="talks" />
      

      
        <summary type="html">Thanks to 10Gen team in providing me an opportunity to speak at the MongoDB Boulder conference.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Conference and Webinar</title>
      <link href="http://localhost:4000/2012/12/13/conference-and-webinar.html" rel="alternate" type="text/html" title="Conference and Webinar" />
      <published>2012-12-13T00:00:00-07:00</published>
      <updated>2012-12-13T00:00:00-07:00</updated>
      <id>http://localhost:4000/2012/12/13/conference-and-webinar</id>
      <content type="html" xml:base="http://localhost:4000/2012/12/13/conference-and-webinar.html">&lt;p&gt;Thanks for attending the session I put at MongoSV on How We Evaluated MongoDB as a Relational Database Replacement. The &lt;a href=&quot;http://www.10gen.com/presentations/mongosv-2012/how-we-evaluated-mongodb-relational-database-replacement&quot; title=&quot;Mongo Evaluation Presentation&quot;&gt;presentation&lt;/a&gt; is now available.&lt;/p&gt;

&lt;p&gt;A double thanks to everyone who also attended the webinar with Shekhar Vemuri and &lt;a href=&quot;http://briglamoreaux.com&quot; title=&quot;Brig Lamoreaux&quot;&gt;me&lt;/a&gt;. Those &lt;a href=&quot;http://pages.10gen.com/track?type=click&amp;amp;enid=bWFpbGluZ2lkPTEwZ2VuQmV0YWN1c3QtNjQxMC0xODk3Mi0wLTY3MDYtcHJvZC01MjIyJm1lc3NhZ2VpZD0wJmRhdGFiYXNlaWQ9NTIyMiZzZXJpYWw9MTM1MDk4NjQ3MSZlbWFpbGlkPWJyaWcubGFtb3JlYXV4QGFwb2xsb2dycC5lZHUmdXNlcmlkPTMwNTU3NDYtMSZleHRyYT0mJiY=&amp;amp;&amp;amp;&amp;amp;http://www.10gen.com/presentations/webinar-how-we-evaluated-mongodb-relational-database-replacement?mkt_tok=3RkMMJWWfF9wsRogv63JZKXonjHpfsX76%2BkoXqOwlMI%2F0ER3fOvrPUfGjI4HS8JkI%2FqLAzICFpZo2FEJSueQcg%3D%3D&quot;&gt;Slides and recording&lt;/a&gt; are now available. If you are interested in more information, you can also download my white paper &lt;a href=&quot;http://briglamoreaux.com/talks/&quot; title=&quot;Brig Lamoreaux Papers&quot;&gt;How Apollo Group Evaluated MongoDB&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="mongodb" />
      
        <category term="mongosv" />
      
        <category term="talks" />
      

      
        <summary type="html">Thanks for attending the session I put at MongoSV on How We Evaluated MongoDB as a Relational Database Replacement. The presentation is now available.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Heading to MongoSV</title>
      <link href="http://localhost:4000/2012/11/08/heading-to-mongosv.html" rel="alternate" type="text/html" title="Heading to MongoSV" />
      <published>2012-11-08T00:00:00-07:00</published>
      <updated>2012-11-08T00:00:00-07:00</updated>
      <id>http://localhost:4000/2012/11/08/heading-to-mongosv</id>
      <content type="html" xml:base="http://localhost:4000/2012/11/08/heading-to-mongosv.html">&lt;p&gt;If you don’t have your schedule finalized, I’ll be speaking on How We Evaluated MongoDB as an Relational Database Replacement at 9:50 am, right after the welcome ceremony at &lt;a href=&quot;http://www.10gen.com/events/mongosv&quot;&gt;MongoSV&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The conference is December 4th from 8:00 am - 8:00 pm. I’ll explain the process, methodology, and results used to evaluated MongoDB to replace Oracle for a core platform component.&lt;/p&gt;

&lt;p&gt;10gen, the MongoDB company, today announced that registration is now open for its record-breaking, annual Silicon Valley event, MongoSV. Unprecedented attendance of software developers, data architects, enterprise customers and production users is expected at the one-day, six-track event on December 4 at the Santa Clara Convention Center.&lt;/p&gt;

&lt;h2 id=&quot;mongosv-event-details&quot;&gt;MONGOSV EVENT DETAILS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; December 4, 2012, from 9:15 a.m. - 5:45 p.m. PT; registration opens at 8:00 a.m. PT&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where:&lt;/strong&gt; Santa Clara Convention Center, 5001 Great America Parkway, Santa Clara, CA 95054&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event sponsors:&lt;/strong&gt; Fusion-io, Joyent, Microsoft, MongoLab, OpenShift and SwiftStack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashtag:&lt;/strong&gt; #mongosv&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more details about the conference, please visit www.mongosv.com.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="mongodb" />
      
        <category term="mongosv" />
      
        <category term="talks" />
      

      
        <summary type="html">If you don’t have your schedule finalized, I’ll be speaking on How We Evaluated MongoDB as an Relational Database Replacement at 9:50 am, right after the welcome ceremony at MongoSV.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Oracle Openworld - MongoDB Use Case</title>
      <link href="http://localhost:4000/2012/10/19/oracle-openworld-mongodb-use-case.html" rel="alternate" type="text/html" title="Oracle Openworld - MongoDB Use Case" />
      <published>2012-10-19T00:00:00-07:00</published>
      <updated>2012-10-19T00:00:00-07:00</updated>
      <id>http://localhost:4000/2012/10/19/oracle-openworld-mongodb-use-case</id>
      <content type="html" xml:base="http://localhost:4000/2012/10/19/oracle-openworld-mongodb-use-case.html">&lt;p&gt;Thanks to Jeremy Taylor with the 10Gen team in providing me an opportunity to speak at Oracle Openworld 2012.&lt;/p&gt;

&lt;p&gt;I covered the findings from my white paper &lt;a href=&quot;/2012/10/01/how-apollo-group-evaluated-mongodb-white-paper.html&quot;&gt;How Apollo Evaluated MongoDB White Paper&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="mongodb" />
      
        <category term="talks" />
      

      
        <summary type="html">Thanks to Jeremy Taylor with the 10Gen team in providing me an opportunity to speak at Oracle Openworld 2012.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How Apollo Group Evaluated MongoDB White Paper</title>
      <link href="http://localhost:4000/2012/10/01/how-apollo-group-evaluated-mongodb-white-paper.html" rel="alternate" type="text/html" title="How Apollo Group Evaluated MongoDB White Paper" />
      <published>2012-10-01T00:00:00-07:00</published>
      <updated>2012-10-01T00:00:00-07:00</updated>
      <id>http://localhost:4000/2012/10/01/how-apollo-group-evaluated-mongodb-white-paper</id>
      <content type="html" xml:base="http://localhost:4000/2012/10/01/how-apollo-group-evaluated-mongodb-white-paper.html">&lt;p&gt;Earlier this year, I did a POC around MongoDB.&lt;/p&gt;

&lt;p&gt;The results were really interesting and I approached &lt;a href=&quot;https://www.mongodb.com/press/10gen-announces-company-name-change-mongodb-inc&quot;&gt;10Gen&lt;/a&gt; if they would like to take the findings to a larger audience. It turns out there is a lot of interest in the community on evaluating MongoDB.&lt;/p&gt;

&lt;p&gt;This paper is a result of many people who helped with the original POC, a lot of notes from the wiki, and months of editing and finalizing the results into something presentable.&lt;/p&gt;

&lt;p&gt;This process taught me a few things:&lt;/p&gt;

&lt;p&gt;Good documentation not only helps a project, but also writing a white paper
The effort to reach out to the community can have large returns.
Nothing is done alone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/10gen-apollo-white-paper.pdf&quot;&gt;MongoWhitePaper.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;migrating-from-oracle---how-apollo-group-evaluated-mongodb&quot;&gt;Migrating from Oracle - How Apollo Group Evaluated MongoDB&lt;/h2&gt;

&lt;p&gt;Apollo Group was planning a strategic initiative to create a cloud-based learning management platform, and the project team knew that the existing Oracle database had neither the flexibility nor the capacity to meet their future needs.  This paper shares the methodologies used to evaluate alternative technologies, and why they ended up selecting MongoDB&lt;/p&gt;

&lt;p&gt;Many organizations are reaching unacceptable limits in flexibility and scalability with their relational databases, and as a result, they have begun to evaluate NoSQL alternatives. When the Apollo group began to build a new cloud-based learning management platform, it evaluated MongoDB against Oracle.&lt;/p&gt;

&lt;p&gt;This white paper will walk you through the planning, process and findings of the Apollo Group’s 8-week evaluation. Download this white paper to learn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to analyze and access the capabilities of a new platform against your project goals and requirements&lt;/li&gt;
  &lt;li&gt;How Apollo Group rated MongoDB on criteria such as performance, scalability, availability and time to implement&lt;/li&gt;
  &lt;li&gt;9 tips for evaluating NoSQL databases that meet scale and complex data needs for big data and beyond&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/collateral/migrating-oracle-how-apollo-group-evaluated-mongodb&quot;&gt;Migrating from Oracle - MongoDB Hosted&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;videos&quot;&gt;Videos&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lZzpO6HeQqE&quot;&gt;Mongo Presentation Clip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mongodb.com/presentations/how-we-evaluated-mongodb-relational-database-replacement&quot;&gt;MongoDB Presentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;downloads&quot;&gt;Downloads&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/10gen-apollo-white-paper.pdf&quot;&gt;MongoWhitePaper.pdf&lt;/a&gt;&lt;/p&gt;

&lt;embed src=&quot;/assets/10gen-apollo-white-paper.pdf&quot; type=&quot;application/pdf&quot; /&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="mongodb" />
      
        <category term="talks" />
      

      
        <summary type="html">Earlier this year, I did a POC around MongoDB.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">.Net Development Trees part II</title>
      <link href="http://localhost:4000/2007/08/16/net-development-trees-part-ii.html" rel="alternate" type="text/html" title=".Net Development Trees part II" />
      <published>2007-08-16T00:00:00-07:00</published>
      <updated>2007-08-16T00:00:00-07:00</updated>
      <id>http://localhost:4000/2007/08/16/net-development-trees-part-ii</id>
      <content type="html" xml:base="http://localhost:4000/2007/08/16/net-development-trees-part-ii.html">&lt;p&gt;I’ve found that taking thought in setting up your project development tree can really help with unit testing and having continuous integration for you projects.&lt;/p&gt;

&lt;p&gt;This is the second installment of a presentation I put on during Desert Code Camp.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;The following tools were used during the presentation and I’ll go over how each one can be used with a sample project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NAnt&lt;/li&gt;
  &lt;li&gt;NAntContrib&lt;/li&gt;
  &lt;li&gt;NUnit&lt;/li&gt;
  &lt;li&gt;NCover&lt;/li&gt;
  &lt;li&gt;WatiN&lt;/li&gt;
  &lt;li&gt;SVN&lt;/li&gt;
  &lt;li&gt;TortoiseSvn&lt;/li&gt;
  &lt;li&gt;CruiseControl.Net&lt;/li&gt;
  &lt;li&gt;TreeSurgon&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sample-project&quot;&gt;Sample Project&lt;/h2&gt;

&lt;p&gt;Using Visual Studio 2005, I created a solution called Castor with several projects in it. The entire solution is in the nice development tree structure under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/castor/src/&lt;/code&gt; folder. Here is what the solution looks like. 
&lt;img src=&quot;http://localhost:4000/assets/images/CropperCapture%5B7%5D.png&quot; alt=&quot;Castor Project&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-step-build&quot;&gt;First Step: Build&lt;/h2&gt;

&lt;p&gt;Once you have a solution set up you might look at the list of tools and get lost on where to start. The easiest place to begin is to set up your project to auto-build. This is simple to do with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NAnt&lt;/code&gt;. We will create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Castor.build&lt;/code&gt; and place it in the root of the project tree structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/castor/&lt;/code&gt;. Here is the first pass to get the project to build.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xmlversion=&quot;1.0&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;projectname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;Castor&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;default=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;compile&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://nant.sf.net/schemas/nant.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Private Properties --&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;propertyname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;build.dir&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;build&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- User Targets --&amp;gt;&lt;/span&gt;  
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;clean&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Delete Automated Build artifacts&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;deletedir&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;${build.dir}&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${directory::exists(build.dir)}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;  
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;compile&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Compiles using the AutomatedDebug Configuration&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;msbuildproject&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;src\Castor.sln&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;propertyname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;Configuration&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AutomatedDebug&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/msbuild&amp;gt;&lt;/span&gt;     
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I did was set up a special build configuration on the castro project called AutomatedDebug. This build type will compile to project just like Debug but will output the files not to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; folder but to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../build&lt;/code&gt; folder. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;castro.build&lt;/code&gt; just kicks off this custom build type using the NAntContrib &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;msbuild/&amp;gt;&lt;/code&gt; task.&lt;/p&gt;

&lt;h2 id=&quot;build-type&quot;&gt;Build Type&lt;/h2&gt;

&lt;p&gt;Setting up the AutomatedDebug configuration is pretty easy to do in Visual Studio 2005. Just click on Build -&amp;gt; Configuration Manager. &lt;img src=&quot;http://localhost:4000/assets/images/CropperCapture%5B8%5D.png&quot; alt=&quot;Build Configure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gobat&quot;&gt;Go.bat&lt;/h2&gt;

&lt;p&gt;The last thing to do in order to get the project to build with a single click is create a batch file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.bat&lt;/code&gt; and save it in the same location as the build file. The file has a single line&lt;/p&gt;

&lt;div class=&quot;language-bat highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@tools\nant\NAnt.exe &lt;span class=&quot;na&quot;&gt;-buildfile&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;:Castor&lt;/span&gt;.build &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And with that, we can open up a prompt at our project root and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;/code&gt;. We should get something like the following with a nice little ‘Build Successful’ at the end. &lt;img src=&quot;http://localhost:4000/assets/images/CropperCapture%5B10%5D.png&quot; alt=&quot;Success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That does it for this installment. Next I’ll dig into adding value to our build script by including auto unit testing.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="net" />
      
        <category term="talks" />
      

      
        <summary type="html">I’ve found that taking thought in setting up your project development tree can really help with unit testing and having continuous integration for you projects.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">.Net Development Trees part I</title>
      <link href="http://localhost:4000/2007/08/15/net-development-trees-part-i.html" rel="alternate" type="text/html" title=".Net Development Trees part I" />
      <published>2007-08-15T00:00:00-07:00</published>
      <updated>2007-08-15T00:00:00-07:00</updated>
      <id>http://localhost:4000/2007/08/15/net-development-trees-part-i</id>
      <content type="html" xml:base="http://localhost:4000/2007/08/15/net-development-trees-part-i.html">&lt;p&gt;During &lt;a href=&quot;http://www.desertcodecamp.com/&quot;&gt;Desert Code Camp&lt;/a&gt;, I put on a presentation called &lt;a href=&quot;http://www.desertcodecamp.com/signUp.aspx?session=196&quot;&gt;Setting up .Net Development Trees&lt;/a&gt; and promised to put up the notes from that presentation. So this is the first installment of that presentation:&lt;/p&gt;

&lt;h2 id=&quot;trees&quot;&gt;Trees&lt;/h2&gt;

&lt;p&gt;Not too many people would think it important to have a discussion on Trees and may ask themselves, ‘This is about Trees?’ Well, yes. Trees as in the folders we use to create our projects. Our projects normally start out as one folder&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/FolderSingle.png&quot; alt=&quot;Single Folder&quot; width=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But then quickly turn into a mess of folders:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/FolderMultiple.png&quot; alt=&quot;Multiple Folders&quot; width=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So as we organize our folders we get a nice little tree of folders (Which looks more like a snake than a tree, but whatever).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/FolderSnakeTree.png&quot; alt=&quot;Folder Snake Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But as we know, trees can grow unruly and quickly get out of hand. For instance look at the tree structure for this dasBlog project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/BadFolderTree.png&quot; alt=&quot;Bad Folder Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wow! This is out of hand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/CoddingHorror.png&quot; alt=&quot;Codding Horror&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or is it? What makes a good tree different from a bad tree?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/GoodBadTree.png&quot; alt=&quot;Good Bad Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the principles that I think can really make a good tree is the concept of S2C.&lt;/p&gt;

&lt;h2 id=&quot;s2c&quot;&gt;S2C&lt;/h2&gt;

&lt;p&gt;Do not confuse S2C with X2C which is a street term for the drug Ecstasy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/X2C.png&quot; alt=&quot;X2C&quot; /&gt;&lt;/p&gt;

&lt;p&gt;S2C stands for Source to Compile and promotes the clear separation between the source code files that make a project from the end result files a project needs in order to run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/S2C1.png&quot; alt=&quot;S2C1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Think of how .CS files are compiled down into .dlls but typically .aspx files stay the same when it comes time for deployment. There are also files that slightly change depending on the environment they are in. For instance the Same Web.config file will have different username and server name settings based upon whether it is in the development, qa, or production environments. S2C draws a clear separation between these source files and the end product, even if the files stay the same.&lt;/p&gt;

&lt;h2 id=&quot;1-step-build&quot;&gt;1 Step Build&lt;/h2&gt;

&lt;p&gt;Because I am a developer, I would rather spend my time actually writing code instead of spending time ensuring my config files are set up correctly for all the environments my project needs to target. In other words, I want to emphasize the ‘S’ and reduce the ‘2c’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/S2C2.png&quot; alt=&quot;S2C2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The way to do that is to create a magic button that will automatically take my source code and in one single click produce the compiled code for every environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/Enter.png&quot; alt=&quot;Magic Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is some good news! There are tools that will do that for us, the most popular being Ant, NAnt, and MSBuild. But before we start using these tools, we should get back to what this entire discussion is about, Trees.&lt;/p&gt;

&lt;h2 id=&quot;development-trees&quot;&gt;Development Trees&lt;/h2&gt;

&lt;p&gt;There is nothing stopping me from creating a wonderful project name Foo with the following folder structure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/ProjectFoo.png&quot; alt=&quot;Project Foo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just as there is nothing wrong with this tree.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/BadTree.png&quot; alt=&quot;Dead Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A dead tree can still provide a home for small critters and bugs but we want to set up a tree that will help us use S2C. One of the most common folder structures in this one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/ProjectBar.png&quot; alt=&quot;Project Bar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This structure gives us the following folders for every project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;docs – Docs is where you store every document you need to support this application. If your team uses a centralized document repository like Jira, or a Wiki, then use the common repository. What this will accomplish is everything that is needed for this project will be in a common folder. Like a small little suitcase with everything tucked away in its own little container.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lib – Also known as ‘references’ or ‘assemblies’. Lib is where you will put the .dll files that your project needs in order to compile and work. If you are using NHibernate or Microsoft Application Blocks, then put the dll in lib and reference that specific version. If you do that, then you will ensure that your project’s version of NHibernate doesn’t change 6 months later when you start working on another project that uses the latest version of NHibernate. Again, this is all about sectioning off your project from the rest of the world.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;src – This is where you will find the project files. When I look at my src folder, I see exactly what I would have gotten if I didn’t use this method of folders. I see my main solution folder and all of my sub projects in their own folder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tools – The tools folder is where we will put things that will help us make the jump in S2C and 1 Click Build. This will house NAnt, NUnit, FXCop, and whatever other tool your team uses to help build quality software.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In part II I will go over the example project of using these tools to help produce quality projects.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="net" />
      
        <category term="talks" />
      

      
        <summary type="html">During Desert Code Camp, I put on a presentation called Setting up .Net Development Trees and promised to put up the notes from that presentation. So this is the first installment of that presentation: Trees</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Desert Code Camp</title>
      <link href="http://localhost:4000/2007/08/15/desert-code-camp.html" rel="alternate" type="text/html" title="Desert Code Camp" />
      <published>2007-08-15T00:00:00-07:00</published>
      <updated>2007-08-15T00:00:00-07:00</updated>
      <id>http://localhost:4000/2007/08/15/desert-code-camp</id>
      <content type="html" xml:base="http://localhost:4000/2007/08/15/desert-code-camp.html">&lt;p&gt;Thanks to everyone who attended the session I put on at &lt;a href=&quot;http://desertcodecamp.com/default.aspx&quot;&gt;Desert Code Camp&lt;/a&gt;, &lt;a href=&quot;http://desertcodecamp.com/signUp.aspx?session=196&quot;&gt;Setting up .NET Development Trees&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We covered a lot of stuff surrounding S2C (Source to Code), NAnt, NUnit, and CruiseControl.Net. I hope to have the notes and slides from the presentation up here within the next few days. Thanks again for attending. I had a lot of fun presenting despite the minor hiccup of forgetting my power supply.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="net" />
      
        <category term="talks" />
      

      
        <summary type="html">Thanks to everyone who attended the session I put on at Desert Code Camp, Setting up .NET Development Trees.</summary>
      

      
      
    </entry>
  
</feed>
