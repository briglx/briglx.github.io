<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/amqp/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2022-05-23T07:38:03-07:00</updated>
  <id>http://localhost:4000/tag/amqp/feed.xml</id>

  
  
  

  
    <title type="html">Brig Lamoreaux | </title>
  

  
    <subtitle>Long term storage for a forgetful mind</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Queues</title>
      <link href="http://localhost:4000/2011/11/01/queues.html" rel="alternate" type="text/html" title="Queues" />
      <published>2011-11-01T00:00:00-07:00</published>
      <updated>2011-11-01T00:00:00-07:00</updated>
      <id>http://localhost:4000/2011/11/01/queues</id>
      <content type="html" xml:base="http://localhost:4000/2011/11/01/queues.html">&lt;p&gt;I attended the &lt;a href=&quot;http://www.springone2gx.com/conference/chicago/2011/10/home&quot;&gt;SpringOne 2GX conference&lt;/a&gt; in Chicago and had a great time. It’s always nice to learn a new thing or two. I wanted to take time to write down one of the things I learned about queues. &lt;a href=&quot;http://www.springone2gx.com/conference/speaker/rob_harrop&quot;&gt;Rob Harrop&lt;/a&gt; gave a great presentation on &lt;a href=&quot;http://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt; which is an &lt;a href=&quot;http://www.amqp.org/&quot;&gt;AMQP&lt;/a&gt; compliant queue.&lt;/p&gt;

&lt;h2 id=&quot;basic-message-flow&quot;&gt;Basic Message Flow&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/queue1.png&quot; alt=&quot;Queue1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A. On the most basic level, Producers publish messages into an exchange with a specific key. For instance:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publish(exhange=&quot;main&quot;, key=&quot;sys.info&quot; body=&quot;Hello world!&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;B. Once the message is in the exchange, it somehow needs to make its way to a queue. Messages are routed to a queue based on a matching rule pattern. Queues are bound to exchanges using patterns.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue.bind(exchange=&quot;main&quot;, routingKey=&quot;sys.*&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C. Consumers simply attach to a queue. What is interesting is if I have two consumers bound to a queue, messages that flow through the queue will be delivered only once in a round robin deliver. That means not all consumers will get all messages. The queue is a queue. Once a message is dequeued it’s gone.&lt;/p&gt;

&lt;p&gt;If you do want to have multiple consumers receive the same message in a broadcast way, all yoou need to do is create two queues with the same routing rules.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/queue2.png&quot; alt=&quot;Queue2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case the message is routed to both Queue 1 and queue 2. For Queue 1, the two consumer will get the messages round robin.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.rabbitmq.com/tutorials/amqp-concepts.html&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Brig Lamoreaux</name>
        
        
      </author>

      

      
        <category term="software" />
      
        <category term="amqp" />
      
        <category term="rabbitmq" />
      
        <category term="springone2gx" />
      

      
        <summary type="html">I attended the SpringOne 2GX conference in Chicago and had a great time. It’s always nice to learn a new thing or two. I wanted to take time to write down one of the things I learned about queues. Rob Harrop gave a great presentation on RabbitMQ which is an AMQP compliant queue.</summary>
      

      
      
    </entry>
  
</feed>
